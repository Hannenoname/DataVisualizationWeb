/**
 * Data handling functions for the Economic Dashboard
 */

// Indicator metadata with display names and explanations
const indicatorMetadata = {
    'Brent': {
        displayName: 'Gi√° d·∫ßu Brent',
        explanation: 'Gi√° d·∫ßu Brent l√† gi√° giao d·ªãch c·ªßa d·∫ßu th√¥ Brent, m·ªôt ch·ªâ s·ªë quan tr·ªçng c·ªßa th·ªã tr∆∞·ªùng d·∫ßu m·ªè qu·ªëc t·∫ø. Khi gi√° d·∫ßu tƒÉng, chi ph√≠ v·∫≠n chuy·ªÉn v√† s·∫£n xu·∫•t h√†ng h√≥a th∆∞·ªùng tƒÉng theo, ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° c·∫£.',
        unit: 'USD/th√πng',
        category: 'H√†ng h√≥a qu·ªëc t·∫ø'
    },
    'China_CPI': {
        displayName: 'Ch·ªâ s·ªë gi√° ti√™u d√πng Trung Qu·ªëc',
        explanation: 'Ch·ªâ s·ªë gi√° ti√™u d√πng (CPI) c·ªßa Trung Qu·ªëc ph·∫£n √°nh m·ª©c ƒë·ªô thay ƒë·ªïi gi√° c·ªßa gi·ªè h√†ng h√≥a v√† d·ªãch v·ª• ti√™u d√πng t·∫°i Trung Qu·ªëc. V√¨ Trung Qu·ªëc l√† ƒë·ªëi t√°c th∆∞∆°ng m·∫°i l·ªõn c·ªßa Vi·ªát Nam, CPI Trung Qu·ªëc c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° h√†ng nh·∫≠p kh·∫©u t·ª´ Trung Qu·ªëc.',
        unit: '%',
        category: 'Kinh t·∫ø qu·ªëc t·∫ø'
    },
    'Core_Inlation': {
        displayName: 'L·∫°m ph√°t c∆° b·∫£n',
        explanation: 'L·∫°m ph√°t c∆° b·∫£n (kh√¥ng bao g·ªìm th·ª±c ph·∫©m v√† nƒÉng l∆∞·ª£ng) ph·∫£n √°nh xu h∆∞·ªõng l·∫°m ph√°t d√†i h·∫°n v√† √≠t bi·∫øn ƒë·ªông h∆°n l·∫°m ph√°t t·ªïng th·ªÉ. ƒê√¢y l√† ch·ªâ s·ªë quan tr·ªçng ƒë·ªÉ ƒë√°nh gi√° √°p l·ª±c gi√° c·∫£ c∆° b·∫£n c·ªßa n·ªÅn kinh t·∫ø.',
        unit: '%',
        category: 'L·∫°m ph√°t'
    },
    'Export': {
        displayName: 'Xu·∫•t kh·∫©u',
        explanation: 'Xu·∫•t kh·∫©u l√† t·ªïng gi√° tr·ªã h√†ng h√≥a v√† d·ªãch v·ª• b√°n ra n∆∞·ªõc ngo√†i. Xu·∫•t kh·∫©u tƒÉng th∆∞·ªùng l√† d·∫•u hi·ªáu t√≠ch c·ª±c cho n·ªÅn kinh t·∫ø v√† c√≥ th·ªÉ gi√∫p tƒÉng gi√° tr·ªã ƒë·ªìng n·ªôi t·ªá.',
        unit: 'T·ª∑ USD',
        category: 'Th∆∞∆°ng m·∫°i'
    },
    'Food_Inflation': {
        displayName: 'L·∫°m ph√°t th·ª±c ph·∫©m',
        explanation: 'L·∫°m ph√°t th·ª±c ph·∫©m ƒëo l∆∞·ªùng s·ª± thay ƒë·ªïi gi√° c·ªßa c√°c m·∫∑t h√†ng th·ª±c ph·∫©m. ƒê√¢y l√† m·ªôt ch·ªâ s·ªë quan tr·ªçng ·ªü Vi·ªát Nam v√¨ th·ª±c ph·∫©m chi·∫øm t·ª∑ tr·ªçng l·ªõn trong chi ti√™u c·ªßa ng∆∞·ªùi d√¢n.',
        unit: '%',
        category: 'L·∫°m ph√°t'
    },
    'Gold': {
        displayName: 'Gi√° v√†ng',
        explanation: 'Gi√° v√†ng th∆∞·ªùng ƒë∆∞·ª£c coi l√† k√™nh ƒë·∫ßu t∆∞ an to√†n trong th·ªùi k·ª≥ b·∫•t ·ªïn kinh t·∫ø. Gi√° v√†ng tƒÉng c√≥ th·ªÉ ph·∫£n √°nh lo ng·∫°i v·ªÅ l·∫°m ph√°t ho·∫∑c b·∫•t ·ªïn kinh t·∫ø.',
        unit: 'USD/ounce',
        category: 'H√†ng h√≥a qu·ªëc t·∫ø'
    },
    'Import': {
        displayName: 'Nh·∫≠p kh·∫©u',
        explanation: 'Nh·∫≠p kh·∫©u l√† t·ªïng gi√° tr·ªã h√†ng h√≥a v√† d·ªãch v·ª• mua t·ª´ n∆∞·ªõc ngo√†i. Nh·∫≠p kh·∫©u tƒÉng c√≥ th·ªÉ cho th·∫•y nhu c·∫ßu trong n∆∞·ªõc m·∫°nh nh∆∞ng c≈©ng c√≥ th·ªÉ g√¢y √°p l·ª±c l√™n t·ª∑ gi√° v√† c√°n c√¢n th∆∞∆°ng m·∫°i.',
        unit: 'T·ª∑ USD',
        category: 'Th∆∞∆°ng m·∫°i'
    },
    'Industrial_products': {
        displayName: 'S·∫£n ph·∫©m c√¥ng nghi·ªáp',
        explanation: 'Ch·ªâ s·ªë s·∫£n ph·∫©m c√¥ng nghi·ªáp ph·∫£n √°nh ho·∫°t ƒë·ªông s·∫£n xu·∫•t trong c√°c ng√†nh c√¥ng nghi·ªáp. ƒê√¢y l√† m·ªôt ch·ªâ b√°o quan tr·ªçng v·ªÅ s·ª©c kh·ªèe c·ªßa n·ªÅn kinh t·∫ø.',
        unit: 'Ch·ªâ s·ªë',
        category: 'S·∫£n xu·∫•t'
    },
    'Agriculture, Forestry and Fishing': {
        displayName: 'N√¥ng, l√¢m nghi·ªáp v√† th·ªßy s·∫£n',
        explanation: 'Ch·ªâ s·ªë n√¥ng, l√¢m nghi·ªáp v√† th·ªßy s·∫£n ph·∫£n √°nh s·∫£n l∆∞·ª£ng c·ªßa c√°c ng√†nh n√†y. ƒê√¢y l√† nh·ªØng ng√†nh quan tr·ªçng trong n·ªÅn kinh t·∫ø Vi·ªát Nam, ƒë·∫∑c bi·ªát ·ªü c√°c v√πng n√¥ng th√¥n.',
        unit: 'Ch·ªâ s·ªë',
        category: 'S·∫£n xu·∫•t'
    },
    'MonthlyCPI': {
        displayName: 'CPI h√†ng th√°ng',
        explanation: 'Ch·ªâ s·ªë gi√° ti√™u d√πng h√†ng th√°ng ƒëo l∆∞·ªùng m·ª©c thay ƒë·ªïi gi√° c·ªßa gi·ªè h√†ng h√≥a v√† d·ªãch v·ª• ti√™u d√πng h√†ng th√°ng. ƒê√¢y l√† ch·ªâ s·ªë ch√≠nh ƒë·ªÉ ƒëo l∆∞·ªùng l·∫°m ph√°t.',
        unit: '%',
        category: 'L·∫°m ph√°t'
    },
    'Unemployment Rate': {
        displayName: 'T·ª∑ l·ªá th·∫•t nghi·ªáp',
        explanation: 'T·ª∑ l·ªá th·∫•t nghi·ªáp l√† ph·∫ßn trƒÉm l·ª±c l∆∞·ª£ng lao ƒë·ªông kh√¥ng c√≥ vi·ªác l√†m. T·ª∑ l·ªá th·∫•p th∆∞·ªùng l√† t√≠n hi·ªáu t·ªët cho n·ªÅn kinh t·∫ø nh∆∞ng c√≥ th·ªÉ g√¢y √°p l·ª±c tƒÉng l∆∞∆°ng, d·∫´n ƒë·∫øn l·∫°m ph√°t cao h∆°n.',
        unit: '%',
        category: 'Lao ƒë·ªông'
    },
    'USD_VND': {
        displayName: 'T·ª∑ gi√° USD/VND',
        explanation: 'T·ª∑ gi√° USD/VND l√† gi√° c·ªßa m·ªôt ƒë√¥ la M·ªπ t√≠nh b·∫±ng ƒë·ªìng Vi·ªát Nam. T·ª∑ gi√° tƒÉng (VND m·∫•t gi√°) c√≥ th·ªÉ l√†m tƒÉng gi√° h√†ng nh·∫≠p kh·∫©u, g√≥p ph·∫ßn v√†o l·∫°m ph√°t.',
        unit: 'VND',
        category: 'T·ª∑ gi√°'
    },
    'VN_coffee,tea,mate,spices': {
        displayName: 'C√† ph√™, tr√† v√† gia v·ªã Vi·ªát Nam',
        explanation: 'Ch·ªâ s·ªë gi√° c√† ph√™, tr√† v√† gia v·ªã Vi·ªát Nam ph·∫£n √°nh gi√° c·∫£ c·ªßa c√°c m·∫∑t h√†ng xu·∫•t kh·∫©u quan tr·ªçng n√†y c·ªßa Vi·ªát Nam.',
        unit: 'Ch·ªâ s·ªë',
        category: 'H√†ng h√≥a trong n∆∞·ªõc'
    },
    'VN_fiscal_deficit': {
        displayName: 'Th√¢m h·ª•t t√†i ch√≠nh Vi·ªát Nam',
        explanation: 'Th√¢m h·ª•t t√†i ch√≠nh l√† s·ª± ch√™nh l·ªách gi·ªØa chi ti√™u c·ªßa ch√≠nh ph·ªß v√† thu ng√¢n s√°ch. Th√¢m h·ª•t l·ªõn c√≥ th·ªÉ d·∫´n ƒë·∫øn tƒÉng n·ª£ c√¥ng v√† c√≥ kh·∫£ nƒÉng g√¢y l·∫°m ph√°t trong d√†i h·∫°n.',
        unit: 'T·ª∑ VND',
        category: 'T√†i ch√≠nh c√¥ng'
    },
    'VN_Gasoline_Prices': {
        displayName: 'Gi√° xƒÉng Vi·ªát Nam',
        explanation: 'Gi√° xƒÉng Vi·ªát Nam ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn chi ph√≠ v·∫≠n chuy·ªÉn v√† gi√°n ti·∫øp ƒë·∫øn gi√° c·ªßa h·∫ßu h·∫øt h√†ng h√≥a v√† d·ªãch v·ª•.',
        unit: 'VND/l√≠t',
        category: 'H√†ng h√≥a trong n∆∞·ªõc'
    },
    'VN_Interest_Rate': {
        displayName: 'L√£i su·∫•t Vi·ªát Nam',
        explanation: 'L√£i su·∫•t Vi·ªát Nam ·∫£nh h∆∞·ªüng ƒë·∫øn chi ph√≠ vay v·ªën v√† quy·∫øt ƒë·ªãnh ti·∫øt ki·ªám/ƒë·∫ßu t∆∞. L√£i su·∫•t cao th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm so√°t l·∫°m ph√°t, nh∆∞ng c√≥ th·ªÉ l√†m ch·∫≠m tƒÉng tr∆∞·ªüng kinh t·∫ø.',
        unit: '%',
        category: 'T√†i ch√≠nh'
    },
    'VN_money_supply': {
        displayName: 'Cung ti·ªÅn Vi·ªát Nam',
        explanation: 'Cung ti·ªÅn l√† t·ªïng l∆∞·ª£ng ti·ªÅn l∆∞u th√¥ng trong n·ªÅn kinh t·∫ø. Cung ti·ªÅn tƒÉng nhanh c√≥ th·ªÉ d·∫´n ƒë·∫øn l·∫°m ph√°t n·∫øu kh√¥ng ƒëi k√®m v·ªõi tƒÉng tr∆∞·ªüng kinh t·∫ø t∆∞∆°ng ·ª©ng.',
        unit: 'T·ª∑ VND',
        category: 'T√†i ch√≠nh'
    },
    'VN_rice_price': {
        displayName: 'Gi√° g·∫°o Vi·ªát Nam',
        explanation: 'Gi√° g·∫°o Vi·ªát Nam l√† m·ªôt ch·ªâ s·ªë quan tr·ªçng v√¨ g·∫°o l√† th·ª±c ph·∫©m ch√≠nh c·ªßa ng∆∞·ªùi Vi·ªát Nam v√† l√† m·∫∑t h√†ng xu·∫•t kh·∫©u quan tr·ªçng.',
        unit: 'VND/kg',
        category: 'H√†ng h√≥a trong n∆∞·ªõc'
    },
    'VN_Trade_Balance': {
        displayName: 'C√°n c√¢n th∆∞∆°ng m·∫°i Vi·ªát Nam',
        explanation: 'C√°n c√¢n th∆∞∆°ng m·∫°i l√† s·ª± ch√™nh l·ªách gi·ªØa gi√° tr·ªã xu·∫•t kh·∫©u v√† nh·∫≠p kh·∫©u. C√°n c√¢n th∆∞∆°ng m·∫°i th·∫∑ng d∆∞ (xu·∫•t kh·∫©u l·ªõn h∆°n nh·∫≠p kh·∫©u) th∆∞·ªùng c√≥ l·ª£i cho t·ª∑ gi√° v√† tƒÉng tr∆∞·ªüng kinh t·∫ø.',
        unit: 'T·ª∑ USD',
        category: 'Th∆∞∆°ng m·∫°i'
    },
    'PC1': {
        displayName: 'Th√†nh ph·∫ßn ch√≠nh 1',
        explanation: 'Th√†nh ph·∫ßn ch√≠nh 1 l√† m·ªôt ch·ªâ s·ªë t·ªïng h·ª£p ƒë∆∞·ª£c t·∫°o ra t·ª´ ph√¢n t√≠ch th√†nh ph·∫ßn ch√≠nh, t√≥m t·∫Øt xu h∆∞·ªõng chung c·ªßa nhi·ªÅu bi·∫øn kinh t·∫ø.',
        unit: 'Ch·ªâ s·ªë',
        category: 'T·ªïng h·ª£p'
    }
};

// Chart type metadata
const chartTypes = [
    {
        id: 'line',
        name: 'Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng',
        color: 'green',
        icon: 'üìà',
        suitability: 'recommended',
        reason: 'D·ªÖ th·∫•y xu h∆∞·ªõng gi√° c·∫£ qua th·ªùi gian.',
        minIndicators: 1,
        maxIndicators: 1,
        description: 'Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng th·ªÉ hi·ªán s·ª± thay ƒë·ªïi c·ªßa m·ªôt ch·ªâ s·ªë theo th·ªùi gian. Th√≠ch h·ª£p ƒë·ªÉ xem xu h∆∞·ªõng tƒÉng, gi·∫£m c·ªßa ch·ªâ s·ªë.'
    },
    {
        id: 'multi-line',
        name: 'Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng nhi·ªÅu ch·ªâ s·ªë',
        color: 'yellow',
        icon: 'üìâ',
        suitability: 'possible',
        reason: 'So s√°nh ƒë∆∞·ª£c nhi·ªÅu ch·ªâ s·ªë, nh∆∞ng r·ªëi n·∫øu qu√° nhi·ªÅu ƒë∆∞·ªùng.',
        minIndicators: 2,
        maxIndicators: 5,
        description: 'Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng nhi·ªÅu ch·ªâ s·ªë cho ph√©p so s√°nh xu h∆∞·ªõng c·ªßa nhi·ªÅu ch·ªâ s·ªë kinh t·∫ø c√πng l√∫c. Gi·ªõi h·∫°n ·ªü 2-5 ch·ªâ s·ªë ƒë·ªÉ tr√°nh g√¢y r·ªëi.'
    },
    {
        id: 'area',
        name: 'Bi·ªÉu ƒë·ªì v√πng ch·ªìng',
        color: 'yellow',
        icon: 'üìä',
        suitability: 'possible',
        reason: 'Th·∫•y ƒë∆∞·ª£c ƒë√≥ng g√≥p c·ªßa t·ª´ng th√†nh ph·∫ßn theo th·ªùi gian.',
        minIndicators: 2,
        maxIndicators: 4,
        description: 'Bi·ªÉu ƒë·ªì v√πng ch·ªìng th·ªÉ hi·ªán ƒë√≥ng g√≥p t∆∞∆°ng ƒë·ªëi c·ªßa c√°c ch·ªâ s·ªë theo th·ªùi gian. H·ªØu √≠ch ƒë·ªÉ th·∫•y ph·∫ßn ƒë√≥ng g√≥p c·ªßa m·ªói th√†nh ph·∫ßn.'
    },
    {
        id: 'bar',
        name: 'Bi·ªÉu ƒë·ªì c·ªôt',
        color: 'yellow',
        icon: 'üìä',
        suitability: 'possible',
        reason: 'D·ªÖ so s√°nh gi√° tr·ªã gi·ªØa c√°c th√°ng trong nƒÉm.',
        minIndicators: 1,
        maxIndicators: 1,
        description: 'Bi·ªÉu ƒë·ªì c·ªôt ph√π h·ª£p ƒë·ªÉ so s√°nh gi√° tr·ªã c·ªßa m·ªôt ch·ªâ s·ªë theo th·ªùi gian, ƒë·∫∑c bi·ªát h·ªØu √≠ch khi mu·ªën th·∫•y r√µ s·ª± ch√™nh l·ªách.'
    },
    {
        id: 'scatter',
        name: 'Bi·ªÉu ƒë·ªì ph√¢n t√°n',
        color: 'green',
        icon: 'üîç',
        suitability: 'recommended',
        reason: 'D·ªÖ th·∫•y m·ªëi quan h·ªá gi·ªØa hai ch·ªâ s·ªë, nh∆∞ gi√° d·∫ßu v√† l·∫°m ph√°t.',
        minIndicators: 2,
        maxIndicators: 2,
        description: 'Bi·ªÉu ƒë·ªì ph√¢n t√°n gi√∫p th·∫•y m·ªëi t∆∞∆°ng quan gi·ªØa hai ch·ªâ s·ªë. M·ªói ƒëi·ªÉm ƒë·∫°i di·ªán cho m·ªôt th·ªùi ƒëi·ªÉm (th√°ng/nƒÉm).'
    },
    {
        id: 'heatmap',
        name: 'Ma tr·∫≠n t∆∞∆°ng quan',
        color: 'red',
        icon: 'üß©',
        suitability: 'not-recommended',
        reason: 'Ph·ª©c t·∫°p v√† kh√≥ hi·ªÉu cho ng∆∞·ªùi kh√¥ng quen v·ªõi th·ªëng k√™.',
        minIndicators: 3,
        maxIndicators: 8,
        description: 'Ma tr·∫≠n t∆∞∆°ng quan th·ªÉ hi·ªán m·ª©c ƒë·ªô t∆∞∆°ng quan gi·ªØa nhi·ªÅu ch·ªâ s·ªë kinh t·∫ø. M√†u ƒë·ªè: t∆∞∆°ng quan thu·∫≠n m·∫°nh, m√†u xanh: t∆∞∆°ng quan ngh·ªãch.'
    },
    {
        id: 'seasonal',
        name: 'Bi·ªÉu ƒë·ªì m√πa v·ª•',
        color: 'green',
        icon: 'üóìÔ∏è',
        suitability: 'recommended',
        reason: 'D·ªÖ th·∫•y m·∫´u m√πa v·ª• theo th√°ng, nh∆∞ gi√° th·ª±c ph·∫©m tƒÉng v√†o T·∫øt.',
        minIndicators: 1,
        maxIndicators: 1,
        description: 'Bi·ªÉu ƒë·ªì m√πa v·ª• ph√¢n t√≠ch t√≠nh m√πa v·ª• c·ªßa m·ªôt ch·ªâ s·ªë. Hi·ªÉn th·ªã 12 bi·ªÉu ƒë·ªì nh·ªè, m·ªói bi·ªÉu ƒë·ªì cho m·ªôt th√°ng.'
    },
    {
        id: 'calendar',
        name: 'B·∫£n ƒë·ªì nhi·ªát theo th·ªùi gian',
        color: 'yellow',
        icon: 'üìÖ',
        suitability: 'possible',
        reason: 'Th·∫•y ƒë∆∞·ª£c bi·∫øn ƒë·ªông theo th√°ng v√† nƒÉm nh∆∞ng c·∫ßn kh√¥ng gian l·ªõn.',
        minIndicators: 1,
        maxIndicators: 1,
        description: 'B·∫£n ƒë·ªì nhi·ªát theo th·ªùi gian hi·ªÉn th·ªã s·ª± thay ƒë·ªïi c·ªßa m·ªôt ch·ªâ s·ªë theo t·ª´ng th√°ng qua c√°c nƒÉm d∆∞·ªõi d·∫°ng b·∫£n ƒë·ªì nhi·ªát m√†u.'
    }
];

// Relationship between indicators for explanations
const relationshipExplanations = {
    'Brent_Core_Inlation': 'Gi√° d·∫ßu Brent th∆∞·ªùng c√≥ m·ªëi quan h·ªá thu·∫≠n v·ªõi l·∫°m ph√°t c∆° b·∫£n. Khi gi√° d·∫ßu tƒÉng, chi ph√≠ v·∫≠n chuy·ªÉn v√† s·∫£n xu·∫•t tƒÉng, d·∫´n ƒë·∫øn gi√° th√†nh s·∫£n ph·∫©m cao h∆°n, g√≥p ph·∫ßn v√†o l·∫°m ph√°t c∆° b·∫£n.',
    'Brent_VN_Gasoline_Prices': 'Gi√° d·∫ßu Brent c√≥ ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn gi√° xƒÉng t·∫°i Vi·ªát Nam. Khi gi√° d·∫ßu th·∫ø gi·ªõi tƒÉng, gi√° xƒÉng trong n∆∞·ªõc th∆∞·ªùng tƒÉng theo, m·∫∑c d√π c√≥ th·ªÉ b·ªã ƒëi·ªÅu ti·∫øt b·ªüi Qu·ªπ B√¨nh ·ªïn gi√° xƒÉng d·∫ßu.',
    'Core_Inlation_VN_Interest_Rate': 'Ng√¢n h√†ng Nh√† n∆∞·ªõc th∆∞·ªùng ƒëi·ªÅu ch·ªânh l√£i su·∫•t ƒë·ªÉ ki·ªÉm so√°t l·∫°m ph√°t. Khi l·∫°m ph√°t c∆° b·∫£n tƒÉng cao, l√£i su·∫•t th∆∞·ªùng ƒë∆∞·ª£c tƒÉng ƒë·ªÉ gi·∫£m cung ti·ªÅn v√† ki·ªÅm ch·∫ø l·∫°m ph√°t.',
    'Food_Inflation_MonthlyCPI': 'L·∫°m ph√°t th·ª±c ph·∫©m ƒë√≥ng g√≥p ƒë√°ng k·ªÉ v√†o CPI h√†ng th√°ng v√¨ th·ª±c ph·∫©m chi·∫øm t·ª∑ tr·ªçng l·ªõn trong gi·ªè h√†ng h√≥a ti√™u d√πng c·ªßa ng∆∞·ªùi Vi·ªát Nam. Bi·∫øn ƒë·ªông gi√° th·ª±c ph·∫©m th∆∞·ªùng ·∫£nh h∆∞·ªüng r√µ r·ªát ƒë·∫øn CPI t·ªïng th·ªÉ.',
    'USD_VND_Import': 'T·ª∑ gi√° USD/VND ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn gi√° h√†ng nh·∫≠p kh·∫©u. Khi ƒë·ªìng Vi·ªát Nam m·∫•t gi√° (t·ª∑ gi√° tƒÉng), h√†ng nh·∫≠p kh·∫©u tr·ªü n√™n ƒë·∫Øt ƒë·ªè h∆°n, c√≥ th·ªÉ l√†m gi·∫£m l∆∞·ª£ng nh·∫≠p kh·∫©u ho·∫∑c tƒÉng gi√° h√†ng nh·∫≠p kh·∫©u.',
    'Export_VN_Trade_Balance': 'Xu·∫•t kh·∫©u l√† m·ªôt th√†nh ph·∫ßn c·ªßa c√°n c√¢n th∆∞∆°ng m·∫°i. Khi xu·∫•t kh·∫©u tƒÉng m√† nh·∫≠p kh·∫©u kh√¥ng ƒë·ªïi ho·∫∑c tƒÉng √≠t h∆°n, c√°n c√¢n th∆∞∆°ng m·∫°i s·∫Ω c·∫£i thi·ªán (th·∫∑ng d∆∞ tƒÉng ho·∫∑c th√¢m h·ª•t gi·∫£m).',
    'VN_Interest_Rate_VN_money_supply': 'L√£i su·∫•t v√† cung ti·ªÅn c√≥ m·ªëi quan h·ªá ngh·ªãch. Khi Ng√¢n h√†ng Nh√† n∆∞·ªõc tƒÉng l√£i su·∫•t, chi ph√≠ vay v·ªën tƒÉng, l√†m gi·∫£m l∆∞·ª£ng ti·ªÅn trong l∆∞u th√¥ng, gi·∫£m cung ti·ªÅn.'
};

// Seasonal explanation for indicators
const seasonalExplanations = {
    'Food_Inflation': 'L·∫°m ph√°t th·ª±c ph·∫©m ·ªü Vi·ªát Nam th∆∞·ªùng c√≥ t√≠nh m√πa v·ª• r√µ r·ªát. Gi√° th·ª±c ph·∫©m th∆∞·ªùng tƒÉng v√†o nh·ªØng th√°ng cu·ªëi nƒÉm do nhu c·∫ßu ti√™u d√πng tƒÉng v√†o d·ªãp T·∫øt Nguy√™n ƒë√°n. Ngo√†i ra, m√πa m∆∞a b√£o (kho·∫£ng th√°ng 7-10) c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ngu·ªìn cung th·ª±c ph·∫©m, ƒë·∫©y gi√° l√™n cao.',
    'MonthlyCPI': 'CPI h√†ng th√°ng th∆∞·ªùng tƒÉng v√†o th√°ng 12 v√† th√°ng 1 do nhu c·∫ßu ti√™u d√πng tƒÉng trong d·ªãp T·∫øt Nguy√™n ƒë√°n. ƒê·∫ßu nƒÉm h·ªçc m·ªõi (th√°ng 8-9) c≈©ng th∆∞·ªùng th·∫•y CPI tƒÉng do chi ph√≠ gi√°o d·ª•c tƒÉng.',
    'VN_rice_price': 'Gi√° g·∫°o th∆∞·ªùng bi·∫øn ƒë·ªông theo m√πa v·ª• thu ho·∫°ch. Vi·ªát Nam c√≥ hai v·ª• l√∫a ch√≠nh: v·ª• ƒê√¥ng Xu√¢n (thu ho·∫°ch kho·∫£ng th√°ng 5-6) v√† v·ª• H√® Thu (thu ho·∫°ch kho·∫£ng th√°ng 9-10). Gi√° g·∫°o th∆∞·ªùng gi·∫£m sau khi thu ho·∫°ch v√† tƒÉng tr∆∞·ªõc v·ª• m·ªõi.',
    'Export': 'Ho·∫°t ƒë·ªông xu·∫•t kh·∫©u th∆∞·ªùng tƒÉng m·∫°nh v√†o cu·ªëi nƒÉm ƒë·ªÉ ƒë√°p ·ª©ng nhu c·∫ßu m√πa l·ªÖ h·ªôi ·ªü c√°c th·ªã tr∆∞·ªùng ph∆∞∆°ng T√¢y. Ng∆∞·ª£c l·∫°i, xu·∫•t kh·∫©u th∆∞·ªùng gi·∫£m v√†o th√°ng 1-2 do ·∫£nh h∆∞·ªüng c·ªßa T·∫øt Nguy√™n ƒë√°n.',
    'VN_Gasoline_Prices': 'Gi√° xƒÉng d·∫ßu th∆∞·ªùng tƒÉng v√†o m√πa du l·ªãch (h√®) do nhu c·∫ßu ƒëi l·∫°i tƒÉng, v√† c√≥ th·ªÉ bi·∫øn ƒë·ªông m·∫°nh theo gi√° d·∫ßu th·∫ø gi·ªõi.'
};

// Data loading and processing
let economicData = [];
let selectedIndicators = [];
let selectedChartType = '';

// Load data from JSON file
async function loadData() {
    try {
        const response = await fetch('/static/data/economic_data.json');
        const data = await response.json();
        
        // Format the data for use in visualizations
        economicData = data.map(d => {
            // Parse date strings to Date objects
            const date = new Date(d.Date);
            return {
                ...d,
                formattedDate: `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`
            };
        });
        
        // Sort data by date
        economicData.sort((a, b) => new Date(a.Date) - new Date(b.Date));
        
        return economicData;
    } catch (error) {
        console.error('Error loading data:', error);
        return [];
    }
}

// Get the list of available indicators (excluding Year, Month, Date, YearMonth)
function getAvailableIndicators() {
    if (economicData.length === 0) return [];
    
    return Object.keys(economicData[0]).filter(key => 
        !['Year', 'Month', 'Date', 'YearMonth', 'formattedDate'].includes(key)
    );
}

// Calculate statistics for a specific indicator
function calculateStats(indicator) {
    if (economicData.length === 0) return null;
    
    const values = economicData.map(d => d[indicator]).filter(v => v !== undefined && v !== null);
    
    if (values.length === 0) return null;
    
    return {
        min: Math.min(...values),
        max: Math.max(...values),
        avg: values.reduce((sum, val) => sum + val, 0) / values.length,
        latest: values[values.length - 1],
        change: values[values.length - 1] - values[values.length - 2]
    };
}

// Calculate correlation between two indicators
function calculateCorrelation(indicator1, indicator2) {
    if (economicData.length === 0) return 0;
    
    const pairs = economicData.map(d => [d[indicator1], d[indicator2]])
        .filter(pair => pair[0] !== undefined && pair[0] !== null && 
                         pair[1] !== undefined && pair[1] !== null);
    
    if (pairs.length < 2) return 0;
    
    // Calculate mean for each indicator
    const mean1 = pairs.reduce((sum, pair) => sum + pair[0], 0) / pairs.length;
    const mean2 = pairs.reduce((sum, pair) => sum + pair[1], 0) / pairs.length;
    
    // Calculate correlation coefficient
    let num = 0;
    let den1 = 0;
    let den2 = 0;
    
    for (const [val1, val2] of pairs) {
        const diff1 = val1 - mean1;
        const diff2 = val2 - mean2;
        
        num += diff1 * diff2;
        den1 += diff1 * diff1;
        den2 += diff2 * diff2;
    }
    
    if (den1 === 0 || den2 === 0) return 0;
    
    return num / Math.sqrt(den1 * den2);
}

// Get data for a specific month across all years
function getMonthlyData(indicator, month) {
    return economicData.filter(d => d.Month === month)
        .map(d => ({
            year: d.Year,
            value: d[indicator]
        }))
        .sort((a, b) => a.year - b.year);
}

// Get relationship explanation for two indicators
function getRelationshipExplanation(indicator1, indicator2) {
    const key1 = `${indicator1}_${indicator2}`;
    const key2 = `${indicator2}_${indicator1}`;
    
    return relationshipExplanations[key1] || 
           relationshipExplanations[key2] || 
           `M·ªëi quan h·ªá gi·ªØa ${indicatorMetadata[indicator1]?.displayName || indicator1} v√† ${indicatorMetadata[indicator2]?.displayName || indicator2} ph·ª• thu·ªôc v√†o nhi·ªÅu y·∫øu t·ªë kinh t·∫ø ph·ª©c t·∫°p v√† c√≥ th·ªÉ thay ƒë·ªïi theo th·ªùi gian.`;
}

// Get seasonal explanation for an indicator
function getSeasonalExplanation(indicator) {
    return seasonalExplanations[indicator] || 
           'C√°c ch·ªâ s·ªë kinh t·∫ø th∆∞·ªùng c√≥ t√≠nh m√πa v·ª• do c√°c y·∫øu t·ªë nh∆∞ chu k·ª≥ s·∫£n xu·∫•t, ti√™u d√πng theo m√πa, v√† c√°c s·ª± ki·ªán ƒë·∫∑c bi·ªát trong nƒÉm nh∆∞ T·∫øt Nguy√™n ƒë√°n.';
}

// Recommend chart types based on selected indicators
function recommendChartTypes(indicators) {
    const count = indicators.length;
    
    return chartTypes.map(chart => {
        let suitability = 'not-recommended';
        
        if (count >= chart.minIndicators && count <= chart.maxIndicators) {
            if (['line', 'seasonal', 'calendar'].includes(chart.id) && count === 1) {
                suitability = 'recommended';
            } else if (chart.id === 'scatter' && count === 2) {
                suitability = 'recommended';
            } else if (['multi-line', 'area', 'bar', 'heatmap'].includes(chart.id)) {
                suitability = 'possible';
            }
        }
        
        return {
            ...chart,
            suitability
        };
    });
}

// Get historical events to annotate charts
function getHistoricalEvents() {
    return [
        { year: 2008, month: 9, event: 'Kh·ªßng ho·∫£ng t√†i ch√≠nh to√†n c·∫ßu' },
        { year: 2011, month: 3, event: 'ƒê·ªông ƒë·∫•t v√† s√≥ng th·∫ßn Nh·∫≠t B·∫£n' },
        { year: 2015, month: 8, event: 'Trung Qu·ªëc ph√° gi√° ƒë·ªìng nh√¢n d√¢n t·ªá' },
        { year: 2020, month: 3, event: 'ƒê·∫°i d·ªãch COVID-19 b√πng ph√°t' },
        { year: 2022, month: 2, event: 'Xung ƒë·ªôt Nga-Ukraine' }
    ];
}

// Export data module
window.dataModule = {
    loadData,
    getAvailableIndicators,
    calculateStats,
    calculateCorrelation,
    getMonthlyData,
    getRelationshipExplanation,
    getSeasonalExplanation,
    recommendChartTypes,
    getHistoricalEvents,
    indicatorMetadata,
    chartTypes
};