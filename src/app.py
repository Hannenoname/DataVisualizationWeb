import streamlit as st
import base64
from core.data_handler import data_handler
from core.visualization_handler import viz_handler

# Th√™m CSS tr·ª±c ti·∫øp cho ·∫£nh n·ªÅn
def add_bg_from_local(image_file):
    with open(image_file, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpg;base64,{encoded_string}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        
        /* Make content containers slightly transparent to show background */
        .css-18e3th9, .css-1d391kg, .stTabs [data-baseweb="tab-panel"] {{
            background-color: rgba(255, 255, 255, 0.85) !important;
            border-radius: 8px;
            padding: 10px;
        }}
        
        /* Style for widgets */
        .stSelectbox, .stMultiSelect {{
            background-color: rgba(255, 255, 255, 0.92) !important;
        }}
        
        /* Style for charts and visualization containers */
        [data-testid="stBlock"] {{
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }}
        
        /* Ch·ªâ √°p d·ª•ng text-shadow cho vƒÉn b·∫£n trong main-title */
        .main-title h1, .main-title h2, .main-title p {{
            color: white !important;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
        }}
        
        /* Lo·∫°i b·ªè text-shadow cho c√°c vƒÉn b·∫£n kh√°c */
        body, h1, h2, h3, p, label {{
            text-shadow: none;
        }}
        
        /* Style for main header section */
        .main-title {{
            text-align: center;
            padding: 40px 20px;
            margin-bottom: 30px;
            background-color: rgba(0, 0, 0, 0.4);
            border-radius: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2);
        }}
        
        .main-title h1 {{
            color: white !important;
            font-family: 'Montserrat', sans-serif;
            font-weight: 700;
            font-size: 3.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
            text-transform: uppercase;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }}
        
        .main-title h2 {{
            color: white !important;
            font-family: 'Montserrat', sans-serif;
            font-weight: 700;
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
            text-transform: uppercase;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }}
        
        .main-title p {{
            color: white !important;
            font-family: 'Poppins', sans-serif;
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }}
        
        /* Hide the default Streamlit title */
        .css-1q8dd3e {{
            display: none;
        }}
        
        /* Add a gradient overlay to the header */
        .main-title::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(43, 108, 176, 0.5) 0%, rgba(37, 64, 143, 0.3) 100%);
            border-radius: 12px;
            z-index: -1;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

def get_chart_recommendations(selected_indicators):
    """L·∫•y c√°c ƒë·ªÅ xu·∫•t bi·ªÉu ƒë·ªì ph√π h·ª£p d·ª±a tr√™n s·ªë l∆∞·ª£ng ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn"""
    num_indicators = len(selected_indicators)
    
    recommendations = {
        'Bi·ªÉu ƒë·ªì xu h∆∞·ªõng': {
            'icon': 'üìà',
            'description': 'Hi·ªÉn th·ªã bi·∫øn ƒë·ªông c√°c ch·ªâ s·ªë theo th·ªùi gian',
            'conditions': 'Ph√π h·ª£p v·ªõi 1-5 ch·ªâ s·ªë',
            'status': 'recommended' if 1 <= num_indicators <= 5 else 'possible' if num_indicators > 5 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì v√πng': {
            'icon': 'üèûÔ∏è',
            'description': 'Hi·ªÉn th·ªã xu h∆∞·ªõng v·ªõi di·ªán t√≠ch t√¥ m√†u',
            'conditions': 'Ph√π h·ª£p v·ªõi 2-5 ch·ªâ s·ªë',
            'status': 'recommended' if 2 <= num_indicators <= 5 else 'possible' if num_indicators > 5 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì c·ªôt': {
            'icon': 'üìä',
            'description': 'So s√°nh gi√° tr·ªã c√°c ch·ªâ s·ªë theo th·ªùi gian',
            'conditions': 'Ph√π h·ª£p v·ªõi 1-6 ch·ªâ s·ªë',
            'status': 'recommended' if 1 <= num_indicators <= 6 else 'possible' if num_indicators > 6 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì ph√¢n t√°n': {
            'icon': 'üîç',
            'description': 'Ph√¢n t√≠ch t∆∞∆°ng quan gi·ªØa hai ch·ªâ s·ªë',
            'conditions': 'Ch√≠nh x√°c 2 ch·ªâ s·ªë',
            'status': 'recommended' if num_indicators == 2 else 'not_recommended'
        },
        'Ma tr·∫≠n t∆∞∆°ng quan': {
            'icon': 'üß©',
            'description': 'Hi·ªÉn th·ªã m·ªëi t∆∞∆°ng quan gi·ªØa nhi·ªÅu ch·ªâ s·ªë',
            'conditions': 'T·ª´ 2 ch·ªâ s·ªë tr·ªü l√™n',
            'status': 'recommended' if num_indicators >= 4 else 'possible' if num_indicators >= 2 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì bong b√≥ng': {
            'icon': 'ü´ß',
            'description': 'Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa 3 ch·ªâ s·ªë',
            'conditions': 'Ch√≠nh x√°c 3 ch·ªâ s·ªë',
            'status': 'recommended' if num_indicators == 3 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì m√πa v·ª•': {
            'icon': 'üìÖ',
            'description': 'Ph√¢n t√≠ch bi·∫øn ƒë·ªông theo m√πa c·ªßa m·ªôt ch·ªâ s·ªë',
            'conditions': 'Ch√≠nh x√°c 1 ch·ªâ s·ªë',
            'status': 'recommended' if num_indicators == 1 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì xu h∆∞·ªõng chi ti·∫øt': {
            'icon': 'üìâ',
            'description': 'Ph√¢n t√≠ch xu h∆∞·ªõng d√†i h·∫°n c·ªßa m·ªôt ch·ªâ s·ªë',
            'conditions': 'Ch√≠nh x√°c 1 ch·ªâ s·ªë',
            'status': 'recommended' if num_indicators == 1 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì h·ªôp': {
            'icon': 'üì¶',
            'description': 'Hi·ªÉn th·ªã ph√¢n ph·ªëi v√† gi√° tr·ªã b·∫•t th∆∞·ªùng',
            'conditions': 'T·ª´ 1 ch·ªâ s·ªë tr·ªü l√™n',
            'status': 'recommended' if 1 <= num_indicators <= 6 else 'possible' if num_indicators > 6 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì radar': {
            'icon': 'üï∏Ô∏è',
            'description': 'So s√°nh gi√° tr·ªã chu·∫©n h√≥a nhi·ªÅu ch·ªâ s·ªë',
            'conditions': 'T·ª´ 3 ch·ªâ s·ªë tr·ªü l√™n',
            'status': 'recommended' if num_indicators >= 3 and num_indicators <= 8 else 'possible' if num_indicators > 8 else 'not_recommended'
        },
        'B·∫£n ƒë·ªì nhi·ªát th·ªùi gian': {
            'icon': 'üóìÔ∏è',
            'description': 'Ph√¢n t√≠ch bi·∫øn ƒë·ªông theo th√°ng v√† nƒÉm',
            'conditions': 'Ch√≠nh x√°c 1 ch·ªâ s·ªë',
            'status': 'recommended' if num_indicators == 1 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì d√≤ng ch·∫£y': {
            'icon': 'üåä',
            'description': 'Hi·ªÉn th·ªã s·ª± thay ƒë·ªïi theo th·ªùi gian',
            'conditions': 'T·ª´ 1-5 ch·ªâ s·ªë',
            'status': 'recommended' if 1 <= num_indicators <= 5 else 'possible' if num_indicators > 5 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì b√°nh': {
            'icon': 'ü•ß',
            'description': 'So s√°nh t·ª∑ tr·ªçng t·∫°i m·ªôt th·ªùi ƒëi·ªÉm',
            'conditions': 'T·ª´ 2 ch·ªâ s·ªë tr·ªü l√™n',
            'status': 'recommended' if num_indicators >= 2 and num_indicators <= 7 else 'possible' if num_indicators > 7 else 'not_recommended'
        },
        'Bi·ªÉu ƒë·ªì histogram': {
            'icon': 'üìä',
            'description': 'Ph√¢n t√≠ch ph√¢n ph·ªëi t·∫ßn su·∫•t gi√° tr·ªã',
            'conditions': 'Ch√≠nh x√°c 1 ch·ªâ s·ªë',
            'status': 'recommended' if num_indicators == 1 else 'not_recommended'
        }
    }
    
    # S·∫Øp x·∫øp theo m·ª©c ƒë·ªô ph√π h·ª£p: recommended -> possible -> not_recommended
    sorted_charts = {}
    # Th√™m c√°c bi·ªÉu ƒë·ªì ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t tr∆∞·ªõc
    for chart, info in recommendations.items():
        if info['status'] == 'recommended':
            sorted_charts[chart] = info
            
    # Sau ƒë√≥ l√† bi·ªÉu ƒë·ªì c√≥ th·ªÉ d√πng ƒë∆∞·ª£c
    for chart, info in recommendations.items():
        if info['status'] == 'possible':
            sorted_charts[chart] = info
            
    # Cu·ªëi c√πng l√† bi·ªÉu ƒë·ªì kh√¥ng ph√π h·ª£p
    for chart, info in recommendations.items():
        if info['status'] == 'not_recommended':
            sorted_charts[chart] = info
    
    return sorted_charts

def get_indicator_explanation_safe(indicator):
    """L·∫•y th√¥ng tin gi·∫£i th√≠ch an to√†n v·ªÅ ch·ªâ s·ªë, tr√°nh KeyError"""
    explanation = viz_handler.get_indicator_explanation(indicator)
    if not isinstance(explanation, dict):
        return {
            'title': indicator,
            'description': 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt',
            'impact': 'Ch∆∞a c√≥ ƒë√°nh gi√° t√°c ƒë·ªông',
            'interpretation': 'Ch∆∞a c√≥ h∆∞·ªõng d·∫´n gi·∫£i th√≠ch',
            'threshold': {}
        }
    
    # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c kh√≥a c·∫ßn thi·∫øt ƒë·ªÅu t·ªìn t·∫°i
    if 'title' not in explanation:
        explanation['title'] = indicator
    if 'description' not in explanation:
        explanation['description'] = 'Ch·ªâ s·ªë kinh t·∫ø quan tr·ªçng c·∫ßn theo d√µi'
    if 'impact' not in explanation:
        explanation['impact'] = 'C√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn ch√≠nh s√°ch v√† ho·∫°t ƒë·ªông kinh t·∫ø'
    if 'interpretation' not in explanation:
        explanation['interpretation'] = 'C·∫ßn ph√¢n t√≠ch trong b·ªëi c·∫£nh t·ªïng th·ªÉ'
    if 'threshold' not in explanation:
        explanation['threshold'] = {}
        
    return explanation

def create_chart(selected_chart, selected_indicators):
    """T·∫°o bi·ªÉu ƒë·ªì d·ª±a tr√™n lo·∫°i bi·ªÉu ƒë·ªì v√† c√°c ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn"""
    # √Ånh x·∫° t√™n bi·ªÉu ƒë·ªì v·ªõi h√†m t·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng ·ª©ng
    chart_functions = {
        'Bi·ªÉu ƒë·ªì xu h∆∞·ªõng': lambda x: viz_handler.create_line_chart(x) if x else None,
        'Bi·ªÉu ƒë·ªì c·ªôt': lambda x: viz_handler.create_bar_chart(x) if x else None,
        'Bi·ªÉu ƒë·ªì ph√¢n t√°n': lambda x: viz_handler.create_scatter_plot(x) if len(x) == 2 else None,
        'Ma tr·∫≠n t∆∞∆°ng quan': lambda x: viz_handler.create_correlation_heatmap(x) if len(x) >= 2 else None,
        'Bi·ªÉu ƒë·ªì m√πa v·ª•': lambda x: viz_handler.create_seasonal_chart(x[0]) if x else None,
        'Bi·ªÉu ƒë·ªì xu h∆∞·ªõng chi ti·∫øt': lambda x: viz_handler.create_trend_chart(x[0]) if x else None,
        'Bi·ªÉu ƒë·ªì h·ªôp': lambda x: viz_handler.create_box_plot(x) if x else None,
        'Bi·ªÉu ƒë·ªì histogram': lambda x: viz_handler.create_histogram(x[0]) if x else None,
        'Bi·ªÉu ƒë·ªì v√πng': lambda x: viz_handler.create_area_chart(x) if len(x) >= 2 else None,
        'Bi·ªÉu ƒë·ªì radar': lambda x: viz_handler.create_radar_chart(x) if len(x) >= 3 else None,
        'Bi·ªÉu ƒë·ªì bong b√≥ng': lambda x: viz_handler.create_bubble_chart(x) if len(x) == 3 else None,
        'B·∫£n ƒë·ªì nhi·ªát th·ªùi gian': lambda x: viz_handler.create_calendar_heatmap(x[0]) if x else None,
        'Bi·ªÉu ƒë·ªì d√≤ng ch·∫£y': lambda x: viz_handler.create_sankey_chart(x) if x else None,
        'Bi·ªÉu ƒë·ªì b√°nh': lambda x: viz_handler.create_pie_chart(x) if len(x) >= 2 else None
    }
    
    if selected_chart in chart_functions:
        return chart_functions[selected_chart](selected_indicators)
    return None

def get_chart_explanation(selected_chart):
    """L·∫•y gi·∫£i th√≠ch v·ªÅ c√°ch ƒë·ªçc bi·ªÉu ƒë·ªì"""
    explanation = viz_handler.get_chart_explanation(selected_chart)
    
    if not isinstance(explanation, dict):
        return {
            'title': selected_chart,
            'description': 'C√¥ng c·ª• tr·ª±c quan h√≥a d·ªØ li·ªáu.',
            'usage': 'Gi√∫p ph√¢n t√≠ch v√† hi·ªÉu r√µ h∆°n v·ªÅ d·ªØ li·ªáu.',
            'reading_guide': ['Xem x√©t xu h∆∞·ªõng v√† m·ªëi quan h·ªá trong d·ªØ li·ªáu']
        }
    
    return explanation

# H√†m g·ª£i √Ω bi·ªÉu ƒë·ªì t·ª± ƒë·ªông d·ª±a tr√™n ch·ªâ s·ªë ƒë√£ ch·ªçn
def suggest_charts(selected_indicators):
    if not selected_indicators:
        return []
    
    suggestions = []
    num_indicators = len(selected_indicators)
    
    # X√°c ƒë·ªãnh c√≥ ph·∫£i t·∫•t c·∫£ ƒë·ªÅu l√† ch·ªâ s·ªë gi√° c·∫£/l·∫°m ph√°t kh√¥ng
    price_related = all(ind in ["Core_Inlation", "Food_Inflation", "MonthlyCPI", "China_CPI"] for ind in selected_indicators)
    
    # X√°c ƒë·ªãnh c√≥ ph·∫£i t·∫•t c·∫£ l√† ch·ªâ s·ªë th∆∞∆°ng m·∫°i kh√¥ng
    trade_related = all(ind in ["Export", "Import", "VN_Trade_Balance", "USD_VND"] for ind in selected_indicators)
    
    # Ki·ªÉm tra xem c√≥ ch·ªâ s·ªë h√†ng h√≥a kh√¥ng
    commodity_related = any(ind in ["Brent", "Gold", "VN_Gasoline_Prices", "VN_rice_price", "VN_coffee,tea,mate,spices"] for ind in selected_indicators)
    
    # G·ª£i √Ω d·ª±a tr√™n s·ªë l∆∞·ª£ng ch·ªâ s·ªë
    if num_indicators == 1:
        suggestions.extend(["Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng", "Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì histogram"])
        if price_related or trade_related or commodity_related:
            suggestions.append("Bi·ªÉu ƒë·ªì xu h∆∞·ªõng chi ti·∫øt")
    elif num_indicators == 2:
        suggestions.extend(["Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng", "Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì scatter"])
        if (price_related and trade_related) or (price_related and commodity_related) or (trade_related and commodity_related):
            suggestions.append("Bi·ªÉu ƒë·ªì ph√¢n t√≠ch h·ªìi quy")
    elif 3 <= num_indicators <= 5:
        suggestions.extend(["Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng", "Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì radar", "Bi·ªÉu ƒë·ªì bong b√≥ng"])
        if any(ind in ["Export", "Import"] for ind in selected_indicators) and "VN_Trade_Balance" in selected_indicators:
            suggestions.append("Bi·ªÉu ƒë·ªì c·ªôt gh√©p")
    else:  # > 5 indicators
        suggestions.extend(["Bi·ªÉu ƒë·ªì heatmap", "Bi·ªÉu ƒë·ªì radar", "Bi·ªÉu ƒë·ªì song song"])
    
    # N·∫øu to√†n b·ªô l√† l·∫°m ph√°t/gi√° c·∫£
    if price_related and num_indicators > 1:
        suggestions.extend(["Bi·ªÉu ƒë·ªì di·ªán t√≠ch", "Bi·ªÉu ƒë·ªì c·ªôt gh√©p"])
    
    # N·∫øu c√≥ c·∫£ Export v√† Import
    if "Export" in selected_indicators and "Import" in selected_indicators:
        suggestions.extend(["Bi·ªÉu ƒë·ªì c·ªôt gh√©p", "Bi·ªÉu ƒë·ªì s√°nh ƒë√¥i"])
    
    return list(set(suggestions))  # Lo·∫°i b·ªè tr√πng l·∫∑p

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng Streamlit"""
    st.set_page_config(page_title="Economic Data Analyzer", page_icon="üìä", layout="wide")
    
    # Th√™m ·∫£nh n·ªÅn
    add_bg_from_local("Lovepik_com-401947920-blue-gradient-geometric-background.jpg")
    
    # Ti√™u ƒë·ªÅ duy nh·∫•t ·ªü gi·ªØa trang
    st.markdown("""
    <div class="main-title">
        <h1>Economic Data Analyzer</h1>
        <h2>üìä Ph√¢n T√≠ch D·ªØ Li·ªáu Kinh T·∫ø</h2>
        <p>Ph√¢n t√≠ch d·ªØ li·ªáu kinh t·∫ø Vi·ªát Nam qua c√°c ch·ªâ s·ªë vƒ© m√¥ quan tr·ªçng.</p>
        <p>Kh√°m ph√° xu h∆∞·ªõng v√† m·ªëi quan h·ªá gi·ªØa c√°c ch·ªâ s·ªë kinh t·∫ø quan tr·ªçng c·ªßa Vi·ªát Nam</p>
    </div>
    """, unsafe_allow_html=True)

    # Load custom CSS
    with open('.streamlit/style.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

    # Add custom CSS for the visualization section
    st.markdown("""
    <style>
    /* Styles for the visualization section */
    .section-header {
        background-color: white;
        border-bottom: 2px solid #e2e8f0;
        padding: 15px;
        border-radius: 10px 10px 0 0;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    
    .section-header h2 {
        color: #1e293b;
        font-size: 24px;
        font-weight: bold;
        margin: 0;
        padding: 0;
    }
    
    .chart-explanation {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #e2e8f0;
        margin-top: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .chart-explanation h3 {
        color: #1e293b;
        border-bottom: 2px solid #e2e8f0;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }
    
    .chart-explanation h4 {
        color: #1e293b;
        margin-top: 15px;
        margin-bottom: 10px;
    }
    
    .chart-explanation ul {
        padding-left: 20px;
    }
    
    .chart-explanation li {
        margin-bottom: 8px;
    }
    
    /* Force white background for Plotly chart container */
    [data-testid="stPlotlyChart"] {
        background-color: white !important;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
    }
    
    /* C·∫£i thi·ªán hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·ªôt */
    .js-plotly-plot .plotly .bars .point path {
        stroke-width: 1px !important;
        stroke: #000 !important;
    }
    
    /* TƒÉng k√≠ch th∆∞·ªõc ch·ªØ trong tr·ª•c */
    .js-plotly-plot .plotly .xtick text,
    .js-plotly-plot .plotly .ytick text {
        font-size: 12px !important;
    }
    
    /* N·ªÅn tr·∫Øng cho v√πng bi·ªÉu ƒë·ªì */
    .js-plotly-plot .plotly .plot-container {
        background-color: white !important;
    }
    
    /* L√†m ƒë·∫≠m ƒë∆∞·ªùng l∆∞·ªõi ƒë·ªÉ d·ªÖ ƒë·ªçc */
    .js-plotly-plot .plotly .gridlayer path {
        stroke-width: 0.5px !important;
        stroke: rgba(150, 150, 150, 0.5) !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # Main container
    with st.container():
        # Selection panels
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("""
                <div class="panel">
                    <h2><i class="fas fa-chart-line"></i> Ch·ªçn Ch·ªâ S·ªë Kinh T·∫ø</h2>
                    <p class="panel-description">Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ch·ªâ s·ªë ƒë·ªÉ ph√¢n t√≠ch. M·ªói ch·ªâ s·ªë s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã v·ªõi m√†u s·∫Øc ri√™ng tr√™n bi·ªÉu ƒë·ªì.</p>
                </div>
            """, unsafe_allow_html=True)
            
            # Th√™m CSS ƒë·ªÉ l√†m g·ªçn g√†ng h∆°n ph·∫ßn ch·ªçn ch·ªâ s·ªë
            st.markdown("""
            <style>
            /* Thu g·ªçn kh√¥ng gian trong h·ªôp ch·ªçn ch·ªâ s·ªë */
            .stCheckbox {
                margin-bottom: 0px !important;
                padding-bottom: 0px !important;
                min-height: 25px !important;
            }
            
            /* Gi·∫£m k√≠ch th∆∞·ªõc font v√† padding */
            .stCheckbox label {
                font-size: 0.9rem !important;
                padding: 3px 0 !important;
            }
            
            /* L√†m nh·ªè kh√¥ng gian cho expander */
            .streamlit-expanderHeader {
                font-size: 0.95rem !important;
                padding: 5px 10px !important;
            }
            
            .streamlit-expanderContent {
                padding: 0px 10px !important;
            }
            </style>
            """, unsafe_allow_html=True)
            
            # Group indicators by category
            indicator_groups = {
                "L·∫°m ph√°t v√† Gi√° c·∫£": ["Core_Inlation", "Food_Inflation", "MonthlyCPI", "China_CPI"],
                "Th∆∞∆°ng m·∫°i": ["Export", "Import", "VN_Trade_Balance", "USD_VND"],
                "H√†ng h√≥a": ["Brent", "Gold", "VN_Gasoline_Prices", "VN_rice_price", "VN_coffee,tea,mate,spices"],
                "Kinh t·∫ø vƒ© m√¥": ["Industrial_products", "Agriculture, Forestry and Fishing", "Unemployment Rate", 
                               "VN_fiscal_deficit", "VN_Interest_Rate", "VN_money_supply"]
            }
            
            selected_indicators = []
            
            # Th√™m tracking s·ªë ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
            selected_counts = {group: 0 for group in indicator_groups}
            
            for group_name, indicators in indicator_groups.items():
                # S·ª≠ d·ª•ng expander m·∫∑c ƒë·ªãnh c·ªßa Streamlit nh∆∞ng t√πy ch·ªânh CSS ƒë·∫πp h∆°n
                available_indicators = [ind for ind in indicators if ind in data_handler.available_indicators]
                
                with st.expander(f"üìå {group_name} ({sum(1 for ind in available_indicators if f'checkbox_{ind}' in st.session_state and st.session_state[f'checkbox_{ind}'])}/{len(available_indicators)})", expanded=True):
                    for indicator in available_indicators:
                        if st.checkbox(
                            viz_handler.indicator_names.get(indicator, indicator),
                            key=f"checkbox_{indicator}",
                            help=viz_handler.get_indicator_explanation(indicator)['description']
                        ):
                            selected_indicators.append(indicator)
                            selected_counts[group_name] += 1
            
            # CSS ƒë·ªÉ l√†m nh√≥m ch·ªâ s·ªë g·ªçn h∆°n
            st.markdown("""
            <style>
                .st-expander {
                    border: 1px solid #e0e0e0 !important;
                    border-radius: 4px !important;
                    margin-bottom: 8px !important;
                    background-color: white !important;
                }
                .st-expander-header {
                    padding: 6px 10px !important;
                    background-color: #f9fafb !important;
                }
                .st-expander-content {
                    padding: 6px 10px !important;
                }
                div.row-widget.stCheckbox {
                    margin-bottom: 2px !important;
                    font-size: 0.9rem !important;
                }
                div.row-widget.stCheckbox label {
                    padding-top: 0 !important;
                    padding-bottom: 0 !important;
                }
                [data-testid="stExpander"] {
                    border: 1px solid #e0e0e0 !important;
                }
            </style>
            """, unsafe_allow_html=True)

        with col2:
            st.subheader("üìä Ch·ªçn bi·ªÉu ƒë·ªì ph√¢n t√≠ch")
            
            # General guidelines for chart selection
            st.markdown("""
            <div style="background-color: #f8f8f8; padding: 10px; border-radius: 5px; margin-bottom: 15px;">
                <h4 style="margin-top: 0;">üß≠ Nguy√™n t·∫Øc ch·ªçn bi·ªÉu ƒë·ªì ph√π h·ª£p:</h4>
                <ul style="margin-bottom: 0; padding-left: 20px;">
                    <li><b>Ph√¢n t√≠ch xu h∆∞·ªõng</b>: D√πng bi·ªÉu ƒë·ªì ƒë∆∞·ªùng/xu h∆∞·ªõng cho d·ªØ li·ªáu theo th·ªùi gian</li>
                    <li><b>Ph√¢n t√≠ch so s√°nh</b>: D√πng bi·ªÉu ƒë·ªì c·ªôt/thanh ƒë·ªÉ so s√°nh gi√° tr·ªã</li>
                    <li><b>Ph√¢n t√≠ch m·ªëi quan h·ªá</b>: D√πng scatter plot cho ph√¢n t√≠ch t∆∞∆°ng quan</li>
                    <li><b>Ph√¢n t√≠ch ph√¢n ph·ªëi</b>: D√πng box plot/histogram cho ph√¢n b·ªë d·ªØ li·ªáu</li>
                    <li><b>Ph√¢n t√≠ch ƒëa ch·ªâ s·ªë</b>: D√πng radar chart cho ph√¢n t√≠ch nhi·ªÅu ch·ªâ s·ªë</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            # Th√™m g·ª£i √Ω bi·ªÉu ƒë·ªì d·ª±a tr√™n ch·ªâ s·ªë ƒë√£ ch·ªçn
            if selected_indicators:
                suggested_charts = suggest_charts(selected_indicators)
                if suggested_charts:
                    st.markdown("""
                    <div style="background-color: #f8f9fa; border-radius: 5px; padding: 10px; margin-bottom: 15px; border-left: 4px solid #4CAF50;">
                        <h4 style="margin-top: 0; color: #2E7D32;">üß† G·ª£i √Ω bi·ªÉu ƒë·ªì ph√π h·ª£p</h4>
                        <p style="margin-bottom: 5px;">D·ª±a tr√™n c√°c ch·ªâ s·ªë b·∫°n ƒë√£ ch·ªçn, ch√∫ng t√¥i g·ª£i √Ω c√°c lo·∫°i bi·ªÉu ƒë·ªì sau:</p>
                        <ul style="margin-bottom: 0;">
                    """, unsafe_allow_html=True)
                    
                    for chart in suggested_charts:
                        st.markdown(f"<li><b>{chart}</b></li>", unsafe_allow_html=True)
                    
                    st.markdown("</ul></div>", unsafe_allow_html=True)
            
            # L·∫•y danh s√°ch bi·ªÉu ƒë·ªì ƒë∆∞·ª£c khuy·∫øn ngh·ªã d·ª±a tr√™n c√°c ch·ªâ s·ªë ƒë√£ ch·ªçn
            recommendations = get_chart_recommendations(selected_indicators)
            selected_chart = None
            
            # Th√™m ch√∫ th√≠ch v·ªÅ ch·ªâ s·ªë kinh t·∫ø ƒë√£ ch·ªçn
            if selected_indicators:
                indicator_names_vi = [viz_handler.indicator_names.get(ind, ind) for ind in selected_indicators]
                indicator_names_str = ", ".join(indicator_names_vi)
                
                # X√°c ƒë·ªãnh lo·∫°i ch·ªâ s·ªë ƒë√£ ch·ªçn ƒë·ªÉ cung c·∫•p g·ª£i √Ω ph√π h·ª£p
                price_indicators = ['Core_Inlation', 'Food_Inflation', 'VN_Gasoline_Prices', 'Gold', 'MonthlyCPI', 'VN_rice_price', 'China_CPI']
                trade_indicators = ['Export', 'Import', 'VN_Trade_Balance', 'VN_coffee,tea,mate,spices']
                rate_indicators = ['USD_VND', 'VN_Interest_Rate', 'Unemployment Rate']
                production_indicators = ['Industrial_products', 'Agriculture, Forestry and Fishing', 'Brent']
                
                selected_price = [ind for ind in selected_indicators if ind in price_indicators]
                selected_trade = [ind for ind in selected_indicators if ind in trade_indicators]
                selected_rate = [ind for ind in selected_indicators if ind in rate_indicators]
                selected_production = [ind for ind in selected_indicators if ind in production_indicators]
                
                suggestions = []
                specific_charts = []
                
                # G·ª£i √Ω cho ch·ªâ s·ªë gi√° c·∫£
                if selected_price:
                    price_names = [viz_handler.indicator_names.get(ind, ind) for ind in selected_price]
                    price_str = ", ".join(price_names[:3])
                    if len(price_names) > 3:
                        price_str += f" v√† {len(price_names) - 3} ch·ªâ s·ªë kh√°c"
                    
                    suggestions.append(f"<span style='color:#0369a1'><b>{price_str}</b></span>: S·ª≠ d·ª•ng <b>bi·ªÉu ƒë·ªì xu h∆∞·ªõng, bi·ªÉu ƒë·ªì v√πng</b> ƒë·ªÉ theo d√µi xu h∆∞·ªõng bi·∫øn ƒë·ªông gi√° theo th·ªùi gian.")
                    
                    if len(selected_price) == 1:
                        specific_charts.append(f"<b>Bi·ªÉu ƒë·ªì xu h∆∞·ªõng chi ti·∫øt</b> ho·∫∑c <b>Bi·ªÉu ƒë·ªì m√πa v·ª•</b> gi√∫p ph√¢n t√≠ch chi ti·∫øt {price_names[0]} qua c√°c giai ƒëo·∫°n")
                    elif len(selected_price) >= 2:
                        specific_charts.append(f"<b>Bi·ªÉu ƒë·ªì ph√¢n t√°n</b> gi√∫p ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa {price_names[0]} v√† {price_names[1]} (c√≥ ·∫£nh h∆∞·ªüng qua l·∫°i?)")
                
                # G·ª£i √Ω cho ch·ªâ s·ªë th∆∞∆°ng m·∫°i
                if selected_trade:
                    trade_names = [viz_handler.indicator_names.get(ind, ind) for ind in selected_trade]
                    trade_str = ", ".join(trade_names[:3])
                    if len(trade_names) > 3:
                        trade_str += f" v√† {len(trade_names) - 3} ch·ªâ s·ªë kh√°c"
                    
                    suggestions.append(f"<span style='color:#0369a1'><b>{trade_str}</b></span>: S·ª≠ d·ª•ng <b>bi·ªÉu ƒë·ªì c·ªôt, bi·ªÉu ƒë·ªì bong b√≥ng</b> ƒë·ªÉ so s√°nh gi√° tr·ªã v√† ph√¢n t√≠ch m·ªëi quan h·ªá.")
                    
                    if 'Export' in selected_trade and 'Import' in selected_trade and 'VN_Trade_Balance' in selected_trade:
                        specific_charts.append("<b>Bi·ªÉu ƒë·ªì v√πng</b> v·ªõi 3 ch·ªâ s·ªë Xu·∫•t kh·∫©u, Nh·∫≠p kh·∫©u v√† C√°n c√¢n th∆∞∆°ng m·∫°i s·∫Ω th·ªÉ hi·ªán t·ªët m·ªëi quan h·ªá gi·ªØa ch√∫ng")
                    elif len(selected_trade) == 1:
                        specific_charts.append(f"<b>Bi·ªÉu ƒë·ªì c·ªôt</b> l√† l·ª±a ch·ªçn t·ªët ƒë·ªÉ so s√°nh gi√° tr·ªã {trade_names[0]} theo t·ª´ng giai ƒëo·∫°n")
                
                # G·ª£i √Ω cho ch·ªâ s·ªë t·ª∑ l·ªá
                if selected_rate:
                    rate_names = [viz_handler.indicator_names.get(ind, ind) for ind in selected_rate]
                    rate_str = ", ".join(rate_names[:3])
                    if len(rate_names) > 3:
                        rate_str += f" v√† {len(rate_names) - 3} ch·ªâ s·ªë kh√°c"
                    
                    suggestions.append(f"<span style='color:#0369a1'><b>{rate_str}</b></span>: S·ª≠ d·ª•ng <b>bi·ªÉu ƒë·ªì xu h∆∞·ªõng, bi·ªÉu ƒë·ªì ph√¢n t√°n</b> ƒë·ªÉ xem di·ªÖn bi·∫øn v√† m·ªëi t∆∞∆°ng quan.")
                    
                    if 'USD_VND' in selected_rate and 'VN_Interest_Rate' in selected_rate:
                        specific_charts.append("<b>Bi·ªÉu ƒë·ªì ph√¢n t√°n</b> gi·ªØa T·ª∑ gi√° USD/VND v√† L√£i su·∫•t s·∫Ω cho th·∫•y m·ªëi li√™n h·ªá gi·ªØa ch√≠nh s√°ch ti·ªÅn t·ªá v√† t·ª∑ gi√°")
                    elif 'Unemployment Rate' in selected_rate:
                        specific_charts.append("<b>B·∫£n ƒë·ªì nhi·ªát th·ªùi gian</b> cho T·ª∑ l·ªá th·∫•t nghi·ªáp gi√∫p ph√°t hi·ªán m·∫´u h√¨nh theo m√πa v√† giai ƒëo·∫°n kinh t·∫ø")
                
                # G·ª£i √Ω cho ch·ªâ s·ªë s·∫£n xu·∫•t
                if selected_production:
                    prod_names = [viz_handler.indicator_names.get(ind, ind) for ind in selected_production]
                    prod_str = ", ".join(prod_names[:3])
                    if len(prod_names) > 3:
                        prod_str += f" v√† {len(prod_names) - 3} ch·ªâ s·ªë kh√°c"
                    
                    suggestions.append(f"<span style='color:#0369a1'><b>{prod_str}</b></span>: S·ª≠ d·ª•ng <b>bi·ªÉu ƒë·ªì h·ªôp, bi·ªÉu ƒë·ªì m√πa v·ª•</b> ƒë·ªÉ ph√¢n t√≠ch ph√¢n ph·ªëi v√† y·∫øu t·ªë th·ªùi v·ª•.")
                    
                    if 'Brent' in selected_production and ('Industrial_products' in selected_production or 'Agriculture, Forestry and Fishing' in selected_production):
                        specific_charts.append("<b>Bi·ªÉu ƒë·ªì ph√¢n t√°n</b> gi·ªØa Gi√° d·∫ßu Brent v√† ch·ªâ s·ªë s·∫£n xu·∫•t s·∫Ω hi·ªÉn th·ªã ·∫£nh h∆∞·ªüng c·ªßa gi√° nƒÉng l∆∞·ª£ng t·ªõi s·∫£n xu·∫•t")
                
                # G·ª£i √Ω k·∫øt h·ª£p gi·ªØa nhi·ªÅu lo·∫°i ch·ªâ s·ªë
                if len(selected_indicators) >= 2:
                    if any(ind in price_indicators for ind in selected_indicators) and any(ind in trade_indicators for ind in selected_indicators):
                        specific_charts.append("<b>Ma tr·∫≠n t∆∞∆°ng quan</b> s·∫Ω cho th·∫•y m·ªëi li√™n h·ªá gi·ªØa c√°c ch·ªâ s·ªë gi√° c·∫£ v√† th∆∞∆°ng m·∫°i (nh∆∞ gi√° d·∫ßu ·∫£nh h∆∞·ªüng t·ªõi xu·∫•t/nh·∫≠p kh·∫©u)")
                    
                    if len(selected_indicators) >= 3 and len(selected_indicators) <= 8:
                        specific_charts.append(f"<b>Bi·ªÉu ƒë·ªì radar</b> s·∫Ω gi√∫p so s√°nh to√†n di·ªán tr·∫°ng th√°i c·ªßa {len(selected_indicators)} ch·ªâ s·ªë ƒë√£ ch·ªçn")
                    
                    if len(selected_indicators) > 4:
                        specific_charts.append("<b>Ma tr·∫≠n t∆∞∆°ng quan</b> gi√∫p nhanh ch√≥ng ph√°t hi·ªán c√°c m·ªëi t∆∞∆°ng quan m·∫°nh c·∫ßn ph√¢n t√≠ch s√¢u h∆°n")
                
                # C·∫£i thi·ªán hi·ªÉn th·ªã b·∫±ng c√°ch ƒë∆°n gi·∫£n h√≥a c·∫•u tr√∫c HTML
                st.markdown(f"""
                    <div style="background-color: #e0f2fe; padding: 15px; border-radius: 5px; margin-bottom: 15px; border: 1px solid #bae6fd;">
                        <p style="margin: 0; color: #0369a1; font-size: 0.95rem;">
                            <strong>Ch·ªâ s·ªë ƒë√£ ch·ªçn:</strong> {indicator_names_str}
                        </p>
                """, unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã t·ª´ng g·ª£i √Ω ri√™ng bi·ªát
                if suggestions:
                    st.markdown("""
                        <p style="margin: 10px 0 0 0; color: #0369a1; font-size: 0.9rem;">
                            <strong>G·ª£i √Ω bi·ªÉu ƒë·ªì ph√π h·ª£p:</strong>
                        </p>
                    """, unsafe_allow_html=True)
                    
                    for suggestion in suggestions:
                        st.markdown(f"<p style='margin: 5px 0 0 15px; color: #0369a1; font-size: 0.85rem;'>‚Ä¢ {suggestion}</p>", unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã c√°c g·ª£i √Ω c·ª• th·ªÉ
                if specific_charts:
                    st.markdown("""
                        <p style="margin: 10px 0 0 0; color: #0369a1; font-size: 0.9rem;">
                            <strong>G·ª£i √Ω c·ª• th·ªÉ:</strong>
                        </p>
                    """, unsafe_allow_html=True)
                    
                    for chart in specific_charts:
                        st.markdown(f"<p style='margin: 5px 0 0 15px; color: #0369a1; font-size: 0.85rem;'>‚Ä¢ {chart}</p>", unsafe_allow_html=True)
                
                # L∆∞u √Ω cu·ªëi c√πng
                st.markdown("""
                    <div style="font-size: 0.85rem; margin-top: 10px; padding-top: 8px; border-top: 1px dashed #bae6fd; color: #0284c7;">
                        <i>üí° L∆∞u √Ω: K·∫øt h·ª£p nhi·ªÅu bi·ªÉu ƒë·ªì gi√∫p ph√¢n t√≠ch to√†n di·ªán h∆°n.</i>
                    </div>
                    </div>
                """, unsafe_allow_html=True)
            
            # Group charts by analysis type
            chart_groups = {
                "Ph√¢n t√≠ch xu h∆∞·ªõng": ["Bi·ªÉu ƒë·ªì xu h∆∞·ªõng", "Bi·ªÉu ƒë·ªì xu h∆∞·ªõng chi ti·∫øt", "Bi·ªÉu ƒë·ªì v√πng"],
                "Ph√¢n t√≠ch so s√°nh": ["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì b√°nh"],
                "Ph√¢n t√≠ch m·ªëi quan h·ªá": ["Bi·ªÉu ƒë·ªì ph√¢n t√°n", "Ma tr·∫≠n t∆∞∆°ng quan", "Bi·ªÉu ƒë·ªì bong b√≥ng"],
                "Ph√¢n t√≠ch ph√¢n ph·ªëi": ["Bi·ªÉu ƒë·ªì h·ªôp", "Bi·ªÉu ƒë·ªì histogram"],
                "Ph√¢n t√≠ch theo m√πa": ["Bi·ªÉu ƒë·ªì m√πa v·ª•", "B·∫£n ƒë·ªì nhi·ªát th·ªùi gian"],
                "Ph√¢n t√≠ch ƒëa chi·ªÅu": ["Bi·ªÉu ƒë·ªì radar", "Bi·ªÉu ƒë·ªì d√≤ng ch·∫£y"]
            }
            
            # Display charts by group
            for group_name, chart_types in chart_groups.items():
                available_charts = [ct for ct in chart_types if ct in recommendations]
                if available_charts:
                    # Th√™m m√¥ t·∫£ cho t·ª´ng nh√≥m
                    group_descriptions = {
                        "Ph√¢n t√≠ch xu h∆∞·ªõng": "Ph√π h·ª£p ƒë·ªÉ theo d√µi bi·∫øn ƒë·ªông d·ªØ li·ªáu theo th·ªùi gian",
                        "Ph√¢n t√≠ch so s√°nh": "Ph√π h·ª£p ƒë·ªÉ so s√°nh gi√° tr·ªã gi·ªØa c√°c ch·ªâ s·ªë ho·∫∑c c√°c k·ª≥",
                        "Ph√¢n t√≠ch m·ªëi quan h·ªá": "Ph√π h·ª£p ƒë·ªÉ t√¨m m·ªëi t∆∞∆°ng quan gi·ªØa c√°c ch·ªâ s·ªë",
                        "Ph√¢n t√≠ch ph√¢n ph·ªëi": "Ph√π h·ª£p ƒë·ªÉ nghi√™n c·ª©u ph√¢n ph·ªëi v√† bi·∫øn ƒë·ªông c·ªßa d·ªØ li·ªáu",
                        "Ph√¢n t√≠ch theo m√πa": "Ph√π h·ª£p ƒë·ªÉ ph√°t hi·ªán xu h∆∞·ªõng theo m√πa v√† chu k·ª≥",
                        "Ph√¢n t√≠ch ƒëa chi·ªÅu": "Ph√π h·ª£p ƒë·ªÉ so s√°nh nhi·ªÅu ch·ªâ s·ªë c√πng l√∫c"
                    }
                    
                    description = group_descriptions.get(group_name, "")
                    
                    st.markdown(f"""
                        <div class="chart-group">
                            <h4>{group_name}</h4>
                            <p style="font-size: 0.85rem; color: #64748b; margin-top: 0; margin-bottom: 10px;">{description}</p>
                        </div>
                    """, unsafe_allow_html=True)
                    
                    for chart_type in available_charts:
                        chart = recommendations[chart_type]
                        status_colors = {
                            'recommended': '#dcfce7',
                            'possible': '#fef9c3',
                            'not_recommended': '#fee2e2'
                        }
                        status_icons = {
                            'recommended': '‚úÖ',
                            'possible': '‚ö†Ô∏è',
                            'not_recommended': '‚ùå'
                        }
                        bg_color = status_colors[chart['status']]
                        status_icon = status_icons[chart['status']]
                        
                        st.markdown(f"""
                            <div class="chart-option" style="background-color: {bg_color}; padding: 15px; border-radius: 8px; margin-bottom: 10px; border: 1px solid #e2e8f0;">
                                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                    <div style="font-size: 1.5rem; margin-right: 10px;">{chart['icon']}</div>
                                    <div style="flex-grow: 1;">
                                        <div style="font-weight: 600; color: #1e293b;">{chart_type}</div>
                                        <div style="font-size: 0.9rem; color: #64748b;">{chart['description']}</div>
                                    </div>
                                    <div style="font-size: 1.2rem;">{status_icon}</div>
                                </div>
                                <div style="font-size: 0.8rem; color: #64748b; margin-top: 5px;">
                                    {chart['conditions']}
                                </div>
                            </div>
                        """, unsafe_allow_html=True)
                        
                        if st.checkbox(f"Ch·ªçn bi·ªÉu ƒë·ªì n√†y", key=f"chart_{chart_type}", value=False):
                            selected_chart = chart_type
                    
                    st.markdown("<hr style='margin: 15px 0; border: none; border-top: 1px solid #e2e8f0;'>", unsafe_allow_html=True)
            
            if not selected_chart:
                st.info("üëÜ Ch·ªçn m·ªôt lo·∫°i bi·ªÉu ƒë·ªì ƒë·ªÉ hi·ªÉn th·ªã ph√¢n t√≠ch")
            
            # Add custom CSS for chart selection
            st.markdown("""
                <style>
                    .chart-group h4 {
                        color: #1e293b;
                        font-size: 1.1rem;
                        font-weight: 600;
                        margin: 15px 0 10px 0;
                    }
                    
                    /* Style for chart selection rows */
                    [data-testid="stHorizontalBlock"] {
                        background: white;
                        padding: 10px;
                        border-radius: 8px;
                        margin-bottom: 8px;
                        border: 1px solid #e2e8f0;
                        transition: all 0.2s ease;
                    }
                    
                    [data-testid="stHorizontalBlock"]:hover {
                        border-color: #3b82f6;
                        transform: translateX(5px);
                    }
                    
                    /* Style for checkboxes */
                    .stCheckbox {
                        padding: 5px 0;
                    }
                    
                    .stCheckbox label {
                        font-weight: 500;
                        color: #1e293b;
                    }
                    
                    /* Style for chart descriptions */
                    .chart-description ul {
                        list-style-type: none;
                    }
                    
                    .chart-description ul li:before {
                        content: "‚Ä¢";
                        color: #3b82f6;
                        font-weight: bold;
                        display: inline-block;
                        width: 1em;
                        margin-left: -1em;
                    }
                    
                    /* Highlight recommended charts */
                    [data-testid="stHorizontalBlock"].recommended {
                        background: #f0f9ff;
                        border-color: #3b82f6;
                    }
                </style>
            """, unsafe_allow_html=True)

        # Visualization section
        if selected_indicators:
            st.markdown('<div class="section-header"><h2>Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch</h2></div>', unsafe_allow_html=True)
            
            if selected_chart:
                fig = create_chart(selected_chart, selected_indicators)
                if fig:
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Combined explanation section in one white container
                    explanation = get_chart_explanation(selected_chart)
                    
                    # S·ª≠ d·ª•ng st.container() ƒë·ªÉ ƒë·∫£m b·∫£o n·ªôi dung n·∫±m trong container ch√≠nh m√†u tr·∫Øng c·ªßa Streamlit
                    with st.container():
                        # Th√™m m·ªôt container c√≥ vi·ªÅn v√† n·ªÅn m√†u tr·∫Øng
                        st.markdown("""
                        <style>
                            .chart-guide-container {
                                background-color: white;
                                border-radius: 10px;
                                padding: 20px;
                                margin: 20px 0;
                                border: 1px solid #eaeaea;
                                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                            }
                        </style>
                        """, unsafe_allow_html=True)
                        
                        # H∆∞·ªõng d·∫´n ƒë·ªçc bi·ªÉu ƒë·ªì
                        st.markdown(f"""
                            <div class="chart-guide-container">
                                <h3 style="color: #1f77b4;">üí° H∆∞·ªõng d·∫´n ƒë·ªçc {explanation['title']}</h3>
                                <p>{explanation['description']}</p>
                                <p><strong>M·ª•c ƒë√≠ch s·ª≠ d·ª•ng:</strong> {explanation['usage']}</p>
                                <h4>C√°ch ƒë·ªçc hi·ªÉu bi·ªÉu ƒë·ªì:</h4>
                                <ul>
                                    {"".join(f'<li>{point}</li>' for point in explanation['reading_guide'])}
                                </ul>
                            </div>
                        """, unsafe_allow_html=True)
                    
                    # Gi·∫£i th√≠ch ch·ªâ s·ªë trong container ri√™ng v·ªõi background m√†u tr·∫Øng
                    with st.container():
                        st.markdown("""
                        <div class="chart-guide-container">
                            <h3 style="color: #1f77b4;">üí° Gi·∫£i th√≠ch ch·ªâ s·ªë</h3>
                        """, unsafe_allow_html=True)
                        
                        for indicator in selected_indicators:
                            explanation = get_indicator_explanation_safe(indicator)
                            st.markdown(f"""
                                <div style='margin-bottom:20px; border-bottom: 1px solid #f0f0f0; padding-bottom: 15px;'>
                                    <h4>{explanation['title']}</h4>
                                    <p><strong>M√¥ t·∫£:</strong> {explanation['description']}</p>
                                    <p><strong>T√°c ƒë·ªông:</strong> {explanation['impact']}</p>
                                    <p><strong>C√°ch ƒë·ªçc:</strong> {explanation['interpretation']}</p>
                                    <p><strong>Ng∆∞·ª°ng ƒë√°nh gi√°:</strong></p>
                                    <ul>
                                        <li style="color: #ff7043;"><strong>Cao:</strong> {explanation['threshold']['high']}</li>
                                        <li style="color: #4caf50;"><strong>Trung b√¨nh:</strong> {explanation['threshold']['medium']}</li>
                                        <li style="color: #2196f3;"><strong>Th·∫•p:</strong> {explanation['threshold']['low']}</li>
                                    </ul>
                                </div>
                            """, unsafe_allow_html=True)
                        
                        st.markdown("</div>", unsafe_allow_html=True)
            else:
                st.info("üëÜ Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ch·ªâ s·ªë kinh t·∫ø ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")

if __name__ == "__main__":
    main() 